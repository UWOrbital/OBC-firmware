#include "obc_gs_uplink_flow.h"
#include "obc_gs_ax25.h"
#include "obc_gs_command_data.h"
#include "obc_gs_command_pack.h"

#include <gtest/gtest.h>
#include <string.h>

TEST(TestInterfaceUplinkFlow, InvalidArgs) {
  packed_ax25_i_frame_t ax25Data = {0};
  uplink_flow_packet_t command = {.data = {0}, .type = UPLINK_FLOW_DECODED_DATA};

  EXPECT_EQ(uplinkDecodePacket(nullptr, &command), OBC_GS_ERR_CODE_INVALID_ARG);
  EXPECT_EQ(uplinkDecodePacket(&ax25Data, &command), OBC_GS_ERR_CODE_INVALID_ARG);
  EXPECT_EQ(uplinkDecodePacket(&ax25Data, &command), OBC_GS_ERR_CODE_INVALID_ARG);
  EXPECT_EQ(uplinkDecodePacket(&ax25Data, nullptr), OBC_GS_ERR_CODE_INVALID_ARG);
}

TEST(TestInterfaceUplinkFlow, Data) {
  packed_ax25_i_frame_t ax25Data = {0};
  uplink_flow_packet_t input = {.data = {1, 2, 3, 4, 5, 6, 7, 8}, .type = UPLINK_FLOW_DECODED_DATA};
  uint8_t aesKey[AES_KEY_SIZE] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8};

  setCurrentLinkDestAddress(&groundStationCallsign);
  ASSERT_EQ(uplinkEncodePacket(&input, &ax25Data, aesKey), OBC_GS_ERR_CODE_SUCCESS);

  uplink_flow_packet_t output = {.data = {0}, .type = UPLINK_FLOW_DECODED_DATA};
  ASSERT_EQ(uplinkDecodePacket(&ax25Data, &output), OBC_GS_ERR_CODE_SUCCESS);

  EXPECT_EQ(memcmp(input.data, output.data, AES_DECRYPTED_SIZE), 0);
}

static void printData(uint8_t *data, uint32_t len) {
  printf("{");
  for (uint32_t i = 0; i < len; ++i) {
    printf("0x%x, ", data[i]);
  }
  printf("}\n");
}

TEST(TestInterfaceUplinkFlow, PingCmd) {
  // Pack ping cmd
  cmd_msg_t cmdMsg = {.isTimeTagged = false, .id = CMD_PING};
  uint32_t cmdPacketOffset = 0;
  uint8_t packedSingleCmdSize = 0;
  uint8_t packedSingleCmd[MAX_CMD_MSG_SIZE] = {0};
  ASSERT_EQ(packCmdMsg(packedSingleCmd, &cmdPacketOffset, &cmdMsg, &packedSingleCmdSize), OBC_GS_ERR_CODE_SUCCESS);

  // Setup for packet encode
  setCurrentLinkDestAddress(&groundStationCallsign);
  uplink_flow_packet_t packet = {.data = {0}, .type = UPLINK_FLOW_DECODED_DATA};
  memcpy(packet.data, packedSingleCmd,
         packedSingleCmdSize < AES_DECRYPTED_SIZE ? packedSingleCmdSize : AES_DECRYPTED_SIZE);
  packed_ax25_i_frame_t ax25Data = {0};

  const uint8_t TEMP_STATIC_KEY[AES_KEY_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                                                 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
  // Encode
  ASSERT_EQ(uplinkEncodePacket(&packet, &ax25Data, TEMP_STATIC_KEY), OBC_GS_ERR_CODE_SUCCESS);

  packed_ax25_i_frame_t ax25DataExpect1 = {
      .data =
          {
              0x7e, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
              0xf0, 0x0,  0x1,  0x2,  0x3,  0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xa,  0xb,  0xc,  0xd,  0xe,  0xf,
              0x1d, 0x9d, 0x19, 0xea, 0xdb, 0xa7, 0xd1, 0x87, 0x6c, 0xb9, 0x40, 0x47, 0x9f, 0x4a, 0xe8, 0xc,  0x31,
              0x5e, 0x70, 0xc8, 0x30, 0xa9, 0xcf, 0x1f, 0x11, 0xb1, 0xee, 0xf6, 0x3e, 0xae, 0xb4, 0xe9, 0xf0, 0xee,
              0x75, 0x37, 0xaa, 0x50, 0x34, 0xee, 0x57, 0xcf, 0xb6, 0xd9, 0xa,  0xc8, 0x90, 0x9a, 0x8b, 0x34, 0xfa,
              0x91, 0x33, 0xd4, 0xba, 0xb9, 0xf6, 0xcb, 0x12, 0x14, 0x1b, 0xc4, 0xf1, 0x8,  0x5a, 0xa1, 0x4d, 0x21,
              0x72, 0x88, 0xe2, 0x92, 0x66, 0xe2, 0x56, 0xfa, 0x94, 0x7c, 0x78, 0xe8, 0x2f, 0x36, 0x21, 0xe4, 0x20,
              0x20, 0x15, 0x61, 0xcf, 0x2e, 0xb1, 0xce, 0xf9, 0xbd, 0x76, 0x86, 0xe8, 0x9c, 0x46, 0xea, 0x5d, 0xe2,
              0xea, 0xc,  0xd0, 0x82, 0xb,  0xdc, 0x75, 0x9a, 0xe8, 0x59, 0xba, 0x44, 0xc1, 0x20, 0x3e, 0x3e, 0xe3,
              0x14, 0x6b, 0x14, 0xc2, 0x4b, 0xc1, 0xa1, 0x8f, 0xb6, 0xa2, 0x16, 0x4a, 0x66, 0xa,  0x68, 0x1,  0xe7,
              0xf,  0xbe, 0x6a, 0x9d, 0xd3, 0xb7, 0xd8, 0xee, 0x85, 0xe,  0xbe, 0x44, 0x82, 0xd7, 0x80, 0x81, 0x89,
              0x43, 0x5,  0x3e, 0x76, 0x83, 0xeb, 0x59, 0x7d, 0xb,  0xbd, 0x4,  0xf5, 0xe5, 0x80, 0xc,  0xd8, 0x19,
              0xe,  0x8e, 0x1a, 0x4b, 0x11, 0xdc, 0x6a, 0xa7, 0x87, 0xb8, 0xf9, 0x86, 0x93, 0x55, 0x37, 0x56, 0x28,
              0x98, 0xc4, 0x1,  0xa7, 0xd3, 0x34, 0x9d, 0x15, 0x5a, 0x68, 0x87, 0x23, 0xd0, 0x35, 0xe1, 0xf1, 0x7,
              0xd1, 0x60, 0xbd, 0x2b, 0x7b, 0x7c, 0xa0, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
              0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
              0x0,  0x0,  0x0,  0x0,  0xc,  0x4b, 0x60, 0x7e,
          },
      .length = 280};
  packed_ax25_i_frame_t ax25DataExpect2 = {
      .data =
          {
              0x7e, 0x0,   0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2,  0x2,
              0xf0, 0x0,   0x1,  0x2,  0x3,  0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xa,  0xb,  0xc,  0xd,  0xe,  0xf,
              0xf,  0x8a,  0x5,  0xda, 0xa0, 0xb7, 0x78, 0x22, 0xf8, 0x70, 0xe5, 0x16, 0x31, 0x94, 0xf9, 0x4b, 0x40,
              0x4c, 0x7c,  0xc9, 0x46, 0x61, 0x87, 0x29, 0x69, 0xad, 0xaf, 0xa8, 0x7a, 0x5d, 0x20, 0x7d, 0x70, 0x68,
              0xb6, 0x52,  0xcc, 0x44, 0x72, 0x97, 0xd1, 0x7b, 0x85, 0x90, 0x9b, 0x98, 0x53, 0xd8, 0x8e, 0x9a, 0x17,
              0x57, 0xa5,  0x32, 0xbe, 0x9f, 0x3,  0xb1, 0x11, 0x92, 0x34, 0x23, 0xda, 0xe9, 0x87, 0x46, 0x99, 0xf4,
              0x4a, 0x11,  0x8e, 0xe2, 0x3b, 0xea, 0x7d, 0x8a, 0x52, 0x50, 0x50, 0x20, 0x37, 0x90, 0xbb, 0x80, 0x77,
              0x2a, 0x1c,  0x92, 0xa3, 0x52, 0x46, 0x2e, 0xda, 0x40, 0x71, 0xf5, 0xb6, 0x37, 0xbc, 0x1e, 0xd,  0x6d,
              0x81, 0x60,  0x66, 0x63, 0x98, 0x13, 0x8c, 0x75, 0xf3, 0x37, 0xc4, 0x22, 0x2c, 0x9a, 0x87, 0xd4, 0x89,
              0x11, 0x1a,  0x59, 0xf7, 0x1c, 0x36, 0x39, 0xaa, 0x99, 0xf,  0xba, 0xea, 0x40, 0x88, 0x0,  0x87, 0x5a,
              0xc7, 0xce,  0x96, 0x26, 0x16, 0xcb, 0x77, 0xa1, 0xac, 0xd9, 0x19, 0xe2, 0xb0, 0x8b, 0x14, 0x6e, 0xc3,
              0xe9, 0xdb,  0xd4, 0x47, 0xa3, 0x6e, 0x1b, 0xca, 0x89, 0x87, 0xc,  0x59, 0x6b, 0x6c, 0x13, 0xa7, 0xe,
              0xfb, 0x1 9, 0x56, 0xf0, 0x7b, 0x90, 0xd5, 0x3,  0x82, 0x2f, 0x86, 0xb2, 0x16, 0x7b, 0x3,  0x24, 0x6,
              0xc0, 0xba,  0xda, 0xf5, 0xc,  0x61, 0x93, 0xec, 0xc4, 0x7a, 0xee, 0xeb, 0xb0, 0xa3, 0x89, 0xf2, 0xbe,
              0x4d, 0x16,  0x46, 0x6c, 0x90, 0xee, 0x80, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
              0x0,  0x0,   0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
              0x0,  0x0,   0x0,  0x0,  0x34, 0x58, 0x80, 0x7e,
          }
              .length = 280};
  EXPECT_EQ(ax25Data.length, ax25DataExpect.length);
  EXPECT_EQ(memcmp(ax25DataExpect.data, ax25Data.data, ax25Data.length), 0);
  printData(ax25Data.data, ax25Data.length);

  uplink_flow_packet_t output = {.data = {0}, .type = UPLINK_FLOW_DECODED_DATA};
  ASSERT_EQ(uplinkDecodePacket(&ax25Data, &output), OBC_GS_ERR_CODE_SUCCESS);

  EXPECT_EQ(memcmp(packet.data, output.data, AES_DECRYPTED_SIZE), 0);
}
