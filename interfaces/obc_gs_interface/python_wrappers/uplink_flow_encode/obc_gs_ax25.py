# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _obc_gs_ax25
else:
    import _obc_gs_ax25

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


AX25_START_FLAG_BYTES = _obc_gs_ax25.AX25_START_FLAG_BYTES
AX25_END_FLAG_BYTES = _obc_gs_ax25.AX25_END_FLAG_BYTES
AX25_TOTAL_FLAG_BYTES = _obc_gs_ax25.AX25_TOTAL_FLAG_BYTES
AX25_SHARE_FLAG_BYTES = _obc_gs_ax25.AX25_SHARE_FLAG_BYTES
AX25_SRC_ADDR_BYTES = _obc_gs_ax25.AX25_SRC_ADDR_BYTES
AX25_DEST_ADDR_BYTES = _obc_gs_ax25.AX25_DEST_ADDR_BYTES
AX25_ADDRESS_BYTES = _obc_gs_ax25.AX25_ADDRESS_BYTES
AX25_MOD128_CONTROL_BYTES = _obc_gs_ax25.AX25_MOD128_CONTROL_BYTES
AX25_MOD8_CONTROL_BYTES = _obc_gs_ax25.AX25_MOD8_CONTROL_BYTES
AX25_PID_BYTES = _obc_gs_ax25.AX25_PID_BYTES
AX25_FCS_BYTES = _obc_gs_ax25.AX25_FCS_BYTES
AX25_INFO_BYTES = _obc_gs_ax25.AX25_INFO_BYTES
AX25_MINIMUM_I_FRAME_LEN_SHARE_FLAG = _obc_gs_ax25.AX25_MINIMUM_I_FRAME_LEN_SHARE_FLAG
AX25_MINIMUM_I_FRAME_LEN = _obc_gs_ax25.AX25_MINIMUM_I_FRAME_LEN
AX25_MAXIMUM_PKT_LEN = _obc_gs_ax25.AX25_MAXIMUM_PKT_LEN
AX25_SUPERVISORY_FRAME_LENGTH = _obc_gs_ax25.AX25_SUPERVISORY_FRAME_LENGTH
AX25_MINIMUM_U_FRAME_CMD_LENGTH = _obc_gs_ax25.AX25_MINIMUM_U_FRAME_CMD_LENGTH
AX25_MAXIMUM_U_FRAME_CMD_LENGTH = _obc_gs_ax25.AX25_MAXIMUM_U_FRAME_CMD_LENGTH
AX25_START_FLAG_POSITION = _obc_gs_ax25.AX25_START_FLAG_POSITION
AX25_DEST_ADDR_POSITION = _obc_gs_ax25.AX25_DEST_ADDR_POSITION
AX25_SRC_ADDR_POSITION = _obc_gs_ax25.AX25_SRC_ADDR_POSITION
AX25_CONTROL_BYTES_POSITION = _obc_gs_ax25.AX25_CONTROL_BYTES_POSITION
AX25_MOD8_PID_POSITION = _obc_gs_ax25.AX25_MOD8_PID_POSITION
AX25_MOD128_PID_POSITION = _obc_gs_ax25.AX25_MOD128_PID_POSITION
AX25_INFO_FIELD_POSITION = _obc_gs_ax25.AX25_INFO_FIELD_POSITION
AX25_I_FRAME_FCS_POSITION = _obc_gs_ax25.AX25_I_FRAME_FCS_POSITION
AX25_S_FRAME_FCS_POSITION = _obc_gs_ax25.AX25_S_FRAME_FCS_POSITION
AX25_U_FRAME_FCS_POSITION = _obc_gs_ax25.AX25_U_FRAME_FCS_POSITION
AX25_FLAG = _obc_gs_ax25.AX25_FLAG
AX25_PID = _obc_gs_ax25.AX25_PID
AX25_S_FRAME_RR_CONTROL = _obc_gs_ax25.AX25_S_FRAME_RR_CONTROL
AX25_S_FRAME_RNR_CONTROL = _obc_gs_ax25.AX25_S_FRAME_RNR_CONTROL
AX25_S_FRAME_REJ_CONTROL = _obc_gs_ax25.AX25_S_FRAME_REJ_CONTROL
AX25_S_FRAME_SREJ_CONTROL = _obc_gs_ax25.AX25_S_FRAME_SREJ_CONTROL
MAX_U_FRAME_CMD_VALUE = _obc_gs_ax25.MAX_U_FRAME_CMD_VALUE
CALL_SIGN_BYTES = _obc_gs_ax25.CALL_SIGN_BYTES
class unstuffed_ax25_i_frame_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_obc_gs_ax25.unstuffed_ax25_i_frame_t_data_get, _obc_gs_ax25.unstuffed_ax25_i_frame_t_data_set)
    length = property(_obc_gs_ax25.unstuffed_ax25_i_frame_t_length_get, _obc_gs_ax25.unstuffed_ax25_i_frame_t_length_set)

    def __init__(self):
        _obc_gs_ax25.unstuffed_ax25_i_frame_t_swiginit(self, _obc_gs_ax25.new_unstuffed_ax25_i_frame_t())
    __swig_destroy__ = _obc_gs_ax25.delete_unstuffed_ax25_i_frame_t

# Register unstuffed_ax25_i_frame_t in _obc_gs_ax25:
_obc_gs_ax25.unstuffed_ax25_i_frame_t_swigregister(unstuffed_ax25_i_frame_t)

class packed_ax25_i_frame_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_obc_gs_ax25.packed_ax25_i_frame_t_data_get, _obc_gs_ax25.packed_ax25_i_frame_t_data_set)
    length = property(_obc_gs_ax25.packed_ax25_i_frame_t_length_get, _obc_gs_ax25.packed_ax25_i_frame_t_length_set)

    def __init__(self):
        _obc_gs_ax25.packed_ax25_i_frame_t_swiginit(self, _obc_gs_ax25.new_packed_ax25_i_frame_t())
    __swig_destroy__ = _obc_gs_ax25.delete_packed_ax25_i_frame_t

# Register packed_ax25_i_frame_t in _obc_gs_ax25:
_obc_gs_ax25.packed_ax25_i_frame_t_swigregister(packed_ax25_i_frame_t)

class packed_ax25_u_frame_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_obc_gs_ax25.packed_ax25_u_frame_t_data_get, _obc_gs_ax25.packed_ax25_u_frame_t_data_set)
    length = property(_obc_gs_ax25.packed_ax25_u_frame_t_length_get, _obc_gs_ax25.packed_ax25_u_frame_t_length_set)

    def __init__(self):
        _obc_gs_ax25.packed_ax25_u_frame_t_swiginit(self, _obc_gs_ax25.new_packed_ax25_u_frame_t())
    __swig_destroy__ = _obc_gs_ax25.delete_packed_ax25_u_frame_t

# Register packed_ax25_u_frame_t in _obc_gs_ax25:
_obc_gs_ax25.packed_ax25_u_frame_t_swigregister(packed_ax25_u_frame_t)

class ax25_addr_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_obc_gs_ax25.ax25_addr_t_data_get, _obc_gs_ax25.ax25_addr_t_data_set)
    length = property(_obc_gs_ax25.ax25_addr_t_length_get, _obc_gs_ax25.ax25_addr_t_length_set)

    def __init__(self):
        _obc_gs_ax25.ax25_addr_t_swiginit(self, _obc_gs_ax25.new_ax25_addr_t())
    __swig_destroy__ = _obc_gs_ax25.delete_ax25_addr_t

# Register ax25_addr_t in _obc_gs_ax25:
_obc_gs_ax25.ax25_addr_t_swigregister(ax25_addr_t)

U_FRAME_CMD_CONN = _obc_gs_ax25.U_FRAME_CMD_CONN
U_FRAME_CMD_DISC = _obc_gs_ax25.U_FRAME_CMD_DISC
U_FRAME_CMD_ACK = _obc_gs_ax25.U_FRAME_CMD_ACK

def ax25UnstuffedWithFlagShareLen(infoBytesLen):
    return _obc_gs_ax25.ax25UnstuffedWithFlagShareLen(infoBytesLen)

def ax25StuffedWithFlagShareLen(infoBytesLen):
    return _obc_gs_ax25.ax25StuffedWithFlagShareLen(infoBytesLen)

def ax25SendIFrameWithFlagSharing(telemData, telemDataLen, ax25Data, ax25DataLen, destAddress):
    return _obc_gs_ax25.ax25SendIFrameWithFlagSharing(telemData, telemDataLen, ax25Data, ax25DataLen, destAddress)

def ax25SendIFrame(telemData, telemDataLen, ax25Data):
    return _obc_gs_ax25.ax25SendIFrame(telemData, telemDataLen, ax25Data)

def ax25SendUFrame(ax25Data, cmd, pollFinalBit):
    return _obc_gs_ax25.ax25SendUFrame(ax25Data, cmd, pollFinalBit)

def ax25Recv(unstuffedPacket, command):
    return _obc_gs_ax25.ax25Recv(unstuffedPacket, command)

def ax25Unstuff(packet, packetLen, unstuffedPacket, unstuffedPacketLen):
    return _obc_gs_ax25.ax25Unstuff(packet, packetLen, unstuffedPacket, unstuffedPacketLen)

def ax25Stuff(rawData, rawDataLen, stuffedData, stuffedDataLen):
    return _obc_gs_ax25.ax25Stuff(rawData, rawDataLen, stuffedData, stuffedDataLen)

def ax25GetDestAddress(address, callSign, callSignLength, ssid, controlBit):
    return _obc_gs_ax25.ax25GetDestAddress(address, callSign, callSignLength, ssid, controlBit)

def ax25GetSourceAddress(address, callSign, callSignLength, ssid, controlBit):
    return _obc_gs_ax25.ax25GetSourceAddress(address, callSign, callSignLength, ssid, controlBit)

def setCurrentLinkDestAddress(destAddress):
    return _obc_gs_ax25.setCurrentLinkDestAddress(destAddress)

def clearCurrentLinkDestAddress():
    return _obc_gs_ax25.clearCurrentLinkDestAddress()

cvar = _obc_gs_ax25.cvar

