var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"cubesat_alg_dev_env_v2_main/attitude_control","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\Users\\joshu\\Desktop\\Orbital\\adcs-modelling\\adcs-modelling\\attitude_control_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'attitude_control'.\r\n *\r\n * Model version                  : 3.78\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Mon Jan  1 12:47:01 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-R\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"attitude_control.h\"          /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(rtM, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  attitude_control_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  attitude_control_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.05 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(rtM) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"attitude_control.c","type":"source","group":"model","path":"C:\\Users\\joshu\\Desktop\\Orbital\\adcs-modelling\\adcs-modelling\\attitude_control_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: attitude_control.c\r\n *\r\n * Code generated for Simulink model 'attitude_control'.\r\n *\r\n * Model version                  : 3.78\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Mon Jan  1 12:47:01 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-R\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"attitude_control.h\"\r\n#include \"rtwtypes.h\"\r\n#include <stddef.h>\r\n#define NumBitsPerChar                 8U\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\nstatic real_T rtGetNaN(void);\r\nstatic real32_T rtGetNaNF(void);\r\n\r\n#define NOT_USING_NONFINITE_LITERALS   1\r\n\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nstatic void rt_InitInfAndNaN(size_t realSize);\r\nstatic boolean_T rtIsInf(real_T value);\r\nstatic boolean_T rtIsInfF(real32_T value);\r\nstatic boolean_T rtIsNaN(real_T value);\r\nstatic boolean_T rtIsNaNF(real32_T value);\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordH;\r\n    uint32_T wordL;\r\n  } words;\r\n} BigEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordL;\r\n    uint32_T wordH;\r\n  } words;\r\n} LittleEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  union {\r\n    real32_T wordLreal;\r\n    uint32_T wordLuint;\r\n  } wordL;\r\n} IEEESingle;\r\n\r\nreal_T rtInf;\r\nreal_T rtMinusInf;\r\nreal_T rtNaN;\r\nreal32_T rtInfF;\r\nreal32_T rtMinusInfF;\r\nreal32_T rtNaNF;\r\nstatic real_T rtGetInf(void);\r\nstatic real32_T rtGetInfF(void);\r\nstatic real_T rtGetMinusInf(void);\r\nstatic real32_T rtGetMinusInfF(void);\r\n\r\n/*\r\n * Initialize rtNaN needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetNaN(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T nan = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    nan = rtGetNaNF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF80000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    nan = tmpVal.fltVal;\r\n  }\r\n\r\n  return nan;\r\n}\r\n\r\n/*\r\n * Initialize rtNaNF needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetNaNF(void)\r\n{\r\n  IEEESingle nanF = { { 0.0F } };\r\n\r\n  nanF.wordL.wordLuint = 0xFFC00000U;\r\n  return nanF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize the rtInf, rtMinusInf, and rtNaN needed by the\r\n * generated code. NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic void rt_InitInfAndNaN(size_t realSize)\r\n{\r\n  (void) (realSize);\r\n  rtNaN = rtGetNaN();\r\n  rtNaNF = rtGetNaNF();\r\n  rtInf = rtGetInf();\r\n  rtInfF = rtGetInfF();\r\n  rtMinusInf = rtGetMinusInf();\r\n  rtMinusInfF = rtGetMinusInfF();\r\n}\r\n\r\n/* Test if value is infinite */\r\nstatic boolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nstatic boolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\r\n}\r\n\r\n/* Test if value is not a number */\r\nstatic boolean_T rtIsNaN(real_T value)\r\n{\r\n  boolean_T result = (boolean_T) 0;\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  if (bitsPerReal == 32U) {\r\n    result = rtIsNaNF((real32_T)value);\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.fltVal = value;\r\n    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&\r\n                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\r\n                          (tmpVal.bitVal.words.wordL != 0) ));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nstatic boolean_T rtIsNaNF(real32_T value)\r\n{\r\n  IEEESingle tmp;\r\n  tmp.wordL.wordLreal = value;\r\n  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\r\n                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\r\n}\r\n\r\n/*\r\n * Initialize rtInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T inf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    inf = rtGetInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    inf = tmpVal.fltVal;\r\n  }\r\n\r\n  return inf;\r\n}\r\n\r\n/*\r\n * Initialize rtInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetInfF(void)\r\n{\r\n  IEEESingle infF;\r\n  infF.wordL.wordLuint = 0x7F800000U;\r\n  return infF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetMinusInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T minf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    minf = rtGetMinusInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    minf = tmpVal.fltVal;\r\n  }\r\n\r\n  return minf;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetMinusInfF(void)\r\n{\r\n  IEEESingle minfF;\r\n  minfF.wordL.wordLuint = 0xFF800000U;\r\n  return minfF.wordL.wordLreal;\r\n}\r\n\r\n/* Model step function */\r\nvoid attitude_control_step(void)\r\n{\r\n  real_T rtb_Product1;\r\n  real_T rtb_Product2;\r\n  real_T rtb_Product2_l;\r\n  real_T rtb_Sign;\r\n  real_T rtb_Sum_b;\r\n\r\n  /* Sum: '<S5>/Sum' incorporates:\r\n   *  Inport: '<Root>/com_quat_body'\r\n   *  Product: '<S5>/Product'\r\n   *  Product: '<S5>/Product1'\r\n   *  Product: '<S5>/Product2'\r\n   *  Product: '<S5>/Product3'\r\n   */\r\n  rtb_Product2_l = ((rtU.com_quat_body[0] * rtU.com_quat_body[0] +\r\n                     rtU.com_quat_body[1] * rtU.com_quat_body[1]) +\r\n                    rtU.com_quat_body[2] * rtU.com_quat_body[2]) +\r\n    rtU.com_quat_body[3] * rtU.com_quat_body[3];\r\n\r\n  /* Product: '<S2>/Divide' incorporates:\r\n   *  Inport: '<Root>/com_quat_body'\r\n   */\r\n  rtb_Sum_b = rtU.com_quat_body[0] / rtb_Product2_l;\r\n\r\n  /* Product: '<S2>/Divide1' incorporates:\r\n   *  Inport: '<Root>/com_quat_body'\r\n   *  UnaryMinus: '<S4>/Unary Minus'\r\n   */\r\n  rtb_Product1 = -rtU.com_quat_body[1] / rtb_Product2_l;\r\n\r\n  /* Product: '<S2>/Divide2' incorporates:\r\n   *  Inport: '<Root>/com_quat_body'\r\n   *  UnaryMinus: '<S4>/Unary Minus1'\r\n   */\r\n  rtb_Product2 = -rtU.com_quat_body[2] / rtb_Product2_l;\r\n\r\n  /* Product: '<S2>/Divide3' incorporates:\r\n   *  Inport: '<Root>/com_quat_body'\r\n   *  UnaryMinus: '<S4>/Unary Minus2'\r\n   */\r\n  rtb_Product2_l = -rtU.com_quat_body[3] / rtb_Product2_l;\r\n\r\n  /* Sum: '<S6>/Sum' incorporates:\r\n   *  Inport: '<Root>/curr_quat_body'\r\n   *  Product: '<S6>/Product'\r\n   *  Product: '<S6>/Product1'\r\n   *  Product: '<S6>/Product2'\r\n   *  Product: '<S6>/Product3'\r\n   */\r\n  rtb_Sign = ((rtb_Sum_b * rtU.est_curr_quat_body[0] - rtb_Product1 *\r\n               rtU.est_curr_quat_body[1]) - rtb_Product2 *\r\n              rtU.est_curr_quat_body[2]) - rtb_Product2_l *\r\n    rtU.est_curr_quat_body[3];\r\n\r\n  /* Signum: '<S1>/Sign' */\r\n  if (rtIsNaN(rtb_Sign)) {\r\n    rtb_Sign = (rtNaN);\r\n  } else if (rtb_Sign < 0.0) {\r\n    rtb_Sign = -1.0;\r\n  } else {\r\n    rtb_Sign = (rtb_Sign > 0.0);\r\n  }\r\n\r\n  /* End of Signum: '<S1>/Sign' */\r\n\r\n  /* Outport: '<Root>/comm_wheel_torque_body' incorporates:\r\n   *  Gain: '<S1>/k_d'\r\n   *  Gain: '<S1>/k_p'\r\n   *  Inport: '<Root>/ang_vel_body'\r\n   *  Inport: '<Root>/curr_quat_body'\r\n   *  Product: '<S1>/Product'\r\n   *  Product: '<S7>/Product'\r\n   *  Product: '<S7>/Product1'\r\n   *  Product: '<S7>/Product2'\r\n   *  Product: '<S7>/Product3'\r\n   *  Product: '<S8>/Product'\r\n   *  Product: '<S8>/Product1'\r\n   *  Product: '<S8>/Product2'\r\n   *  Product: '<S8>/Product3'\r\n   *  Product: '<S9>/Product'\r\n   *  Product: '<S9>/Product1'\r\n   *  Product: '<S9>/Product2'\r\n   *  Product: '<S9>/Product3'\r\n   *  Sum: '<S1>/Sum6'\r\n   *  Sum: '<S7>/Sum'\r\n   *  Sum: '<S8>/Sum'\r\n   *  Sum: '<S9>/Sum'\r\n   */\r\n  rtY.comm_wheel_torque_body[0] = (((rtb_Sum_b * rtU.est_curr_quat_body[1] +\r\n    rtb_Product1 * rtU.est_curr_quat_body[0]) + rtb_Product2 *\r\n    rtU.est_curr_quat_body[3]) - rtb_Product2_l * rtU.est_curr_quat_body[2]) *\r\n    0.2 * rtb_Sign + 0.1 * rtU.est_curr_ang_vel_body[0];\r\n  rtY.comm_wheel_torque_body[1] = (((rtb_Sum_b * rtU.est_curr_quat_body[2] -\r\n    rtb_Product1 * rtU.est_curr_quat_body[3]) + rtb_Product2 *\r\n    rtU.est_curr_quat_body[0]) + rtb_Product2_l * rtU.est_curr_quat_body[1]) *\r\n    0.2 * rtb_Sign + 0.1 * rtU.est_curr_ang_vel_body[1];\r\n  rtY.comm_wheel_torque_body[2] = (((rtb_Sum_b * rtU.est_curr_quat_body[3] +\r\n    rtb_Product1 * rtU.est_curr_quat_body[2]) - rtb_Product2 *\r\n    rtU.est_curr_quat_body[1]) + rtb_Product2_l * rtU.est_curr_quat_body[0]) *\r\n    0.2 * rtb_Sign + 0.1 * rtU.est_curr_ang_vel_body[2];\r\n}\r\n\r\n/* Model initialize function */\r\nvoid attitude_control_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize non-finites */\r\n  rt_InitInfAndNaN(sizeof(real_T));\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"attitude_control.h","type":"header","group":"model","path":"C:\\Users\\joshu\\Desktop\\Orbital\\adcs-modelling\\adcs-modelling\\attitude_control_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: attitude_control.h\r\n *\r\n * Code generated for Simulink model 'attitude_control'.\r\n *\r\n * Model version                  : 3.78\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Mon Jan  1 12:47:01 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-R\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_attitude_control_h_\r\n#define RTW_HEADER_attitude_control_h_\r\n#ifndef attitude_control_COMMON_INCLUDES_\r\n#define attitude_control_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#endif                                 /* attitude_control_COMMON_INCLUDES_ */\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real_T est_curr_ang_vel_body[3];     /* '<Root>/ang_vel_body' */\r\n  real_T est_curr_quat_body[4];        /* '<Root>/curr_quat_body' */\r\n  real_T com_quat_body[4];             /* '<Root>/com_quat_body' */\r\n  real_T mag_field_body[3];            /* '<Root>/mag_field_body' */\r\n} ExtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T comm_wheel_torque_body[3];    /* '<Root>/comm_wheel_torque_body' */\r\n  real_T comm_mag_dipole_body[3];      /* '<Root>/comm_mag_dipole_body' */\r\n} ExtY;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/* Model entry point functions */\r\nextern void attitude_control_initialize(void);\r\nextern void attitude_control_step(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S1>/reaction_wheel_torque' : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('cubesat_alg_dev_env_v2_main/attitude_control')    - opens subsystem cubesat_alg_dev_env_v2_main/attitude_control\r\n * hilite_system('cubesat_alg_dev_env_v2_main/attitude_control/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'cubesat_alg_dev_env_v2_main'\r\n * '<S1>'   : 'cubesat_alg_dev_env_v2_main/attitude_control'\r\n * '<S2>'   : 'cubesat_alg_dev_env_v2_main/attitude_control/Quaternion Inverse1'\r\n * '<S3>'   : 'cubesat_alg_dev_env_v2_main/attitude_control/Quaternion Multiplication'\r\n * '<S4>'   : 'cubesat_alg_dev_env_v2_main/attitude_control/Quaternion Inverse1/Quaternion Conjugate'\r\n * '<S5>'   : 'cubesat_alg_dev_env_v2_main/attitude_control/Quaternion Inverse1/Quaternion Norm'\r\n * '<S6>'   : 'cubesat_alg_dev_env_v2_main/attitude_control/Quaternion Multiplication/q0'\r\n * '<S7>'   : 'cubesat_alg_dev_env_v2_main/attitude_control/Quaternion Multiplication/q1'\r\n * '<S8>'   : 'cubesat_alg_dev_env_v2_main/attitude_control/Quaternion Multiplication/q2'\r\n * '<S9>'   : 'cubesat_alg_dev_env_v2_main/attitude_control/Quaternion Multiplication/q3'\r\n */\r\n#endif                                 /* RTW_HEADER_attitude_control_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\joshu\\Desktop\\Orbital\\adcs-modelling\\adcs-modelling\\attitude_control_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'attitude_control'.\r\n *\r\n * Model version                  : 3.78\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Mon Jan  1 12:47:01 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-R\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-R\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};